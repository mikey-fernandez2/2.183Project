% 2.183 Project
% 05/05/2021
% Calculate the motion for the 3-link arm during a serve

%%
clc; close all; clear all;

%% Parameters
global p % parameters

% set parameter values
w = 65;                                                     % kg, total body mass
m1 = .028*w; m2 = 0.016*w; m3 = 0.06*w;                     % kg, mass of each link
l1 = 0.286; l2 = 0.269; l3 = 0.08;                          % m, link lengths
r1 = .484*l1; r2 = .439*l2; r3 = .506*l3;                   % m, distance to center of mass of each link
rg1 = rg2 = rg3 = ;
Ic1 = 1/12*m1*l1^2; Ic2 = 1/12*m2*l2^2; Ic3 = 1/12*m3*l3^2; % kg-m^2, moment of inertia about mass center
g = 9.81;                                                   % m/s^2, gravity constant
k1 = 0; k2 = 0; k3 = 0;                                     % N-m/rad, joint stiffness constants
b1 = 0; b2 = 0; b3 = 0;                                     % N-m-s/rad, joint damping constants

p = [m1 m2 m3 Ic1 Ic2 Ic3 l1 l2 l3 r1 r2 r3 g k1 k2 k3 b1 b2 b3]';

%% Calculate and plot motions
th0 = [0; 0; 0];
om0 = [0; 0; 0];
z0 = [th0; om0];

freq = 1000;
tSpan = 0:1/freq:3;

[tOut, yOut] = ode45(@stateEqs, tSpan, z0);
th1 = yOut(:, 1); th2 = yOut(:, 2); th3 = yOut(:, 3);
om1 = yOut(:, 4); om2 = yOut(:, 5); om3 = yOut(:, 6);

figure
for i = 1:length(tOut)
    pos_links = keypoints_tennisServe(yOut(i, :)', p);
    xCoords = [0 pos_links(1, :)];
    yCoords = [0 pos_links(2, :)];
    
    plot(xCoords, yCoords)
    xlabel('x (m)')
    ylabel('y (m)')
    title(['t = ', num2str(tOut(i), '%.3f'), ' s']) 
    xlim([-3 3])
    ylim([-3 3])
    
    pause(0.001)
end

%% Functions
function dxdt = stateEqs(t, z)
    global p
    
    % extract states
    th1 = z(1); om1 = z(4);
    th2 = z(2); om2 = z(5);
    th3 = z(3); om3 = z(6);
    th = [th1; th2; th3];
    om = [om1; om2; om3];
    
    % get input force, torque
    F = [0; 0];
    T = [0; 0; 0];
    u = [F; T];
    
    % get configuration dependent matrices
%     I = [I1 + I2 + I3 + m2*l2^2 + m3*l1^2 + m3*l2^2 + m2*l1*r2*cos(th2) + m3*l1*l2*cos(th2) + m3*l1*r3*cos(th2 + th3) + m3*l2*r3*cos(th2) I2 + I3 + m3*l2^2 + m2*l1*r2*cos(th2) + m3*l1*l2*cos(th2) + m3*l1*r3*cos(th2 + th3) + 2*m3*l2*r3*cos(th3) I3 + m3*l1*r3*cos(th2 + th3) + m3*l2*r3*cos(th3);
%          I2 + I3 + m3*l2^2 + m2*l1*r2*cos(th2) + m3*l1*l2*cos(th2) + m3*l1*r3*cos(th2 + th3) + 2*m3*l2*r3*cos(th3)                        I2 + I3 + m3*l2^2 + m3*l2*r3*cos(th3)                                                                     I3 + m3*l2*r3*cos(th3);
%          I3 + m3*l1*r3*cos(th2 + th3) + m3*l2*r3*cos(th3)                                                                                 I3 + m3*l2*r3*cos(th3)                                                                                    I3]; 
% 
%     C = [(0)                                                                                                                       (-(m2*l1*r2*sin(th2) + m3*l1*l2*sin(th2) + m3*l1*r3*sin(th2 + th3) + m3*l2*r3*sin(th2))*om1 - (m2*l1*r2*sin(th2) + m3*l1*l2*sin(th2) + m3*l1*r3*sin(th2 + th3))*om2 - (2*m3*l1*r3*sin(th2 + th3) + 2*m3*l2*r3*sin(th3))*om3) (-(m3*l1*r3*sin(th2 + th3))*om1 - (m3*l1*r3*sin(th2 + th3) + m3*l2*r3*sin(th3))*om3);
%          (1/2*(m2*l1*r2*sin(th2) + m3*l1*l2*sin(th2) + m3*l1*r3*sin(th2 + th3) + m3*l2*r3*sin(th2))*om1 + 2*m3*l2*r3*sin(th3)*om2) (0)                                                                                                                                                                                                                          (-(m3*l2*r3*sin(th3))*om1 - m3*l2*r3*cos(th3)*om2 - m3*l2*r3*sin(th3)*om3);
%          (1/2*(m3*l1*r3*sin(th2 + th3))*om1 - 2*m3*l2*r3*sin(th3)*om2)                                                             (1/2*(m3*l2*r3*sin(th3))*om2)                                                                                                                                                                                                (0)];
% 
%     G = [g*(m1*r1*cos(th1) + m2*(l1*cos(th1) + r2*cos(th1 + th2)) + m3*(l1*cos(th1) + l2*cos(th1 + th2) + r3*cos(th1 + th2 + th3)));
%          g*(m2*r2*cos(th1 + th2) + m3*(l2*cos(th1 + th2) + r3*cos(th1 + th2 + th3)));
%          g*(m3*r3*cos(th1 + th2 + th3))];
% 
%     Je = [-l1*sin(th1) - l2*sin(th1 + th2) - l3*sin(th1 + th2 + th3), -l2*sin(th1 + th2) - l3*sin(th1 + th2 + th3), -l3*sin(th1 + th2 + th3);
%            l1*cos(th1) + l2*cos(th1 + th2) + l3*cos(th1 + th2 + th3),  l2*cos(th1 + th2) + l3*cos(th1 + th2 + th3),  l3*cos(th1 + th2 + th3)];

    A = A_tennisServe(z, p);
    b = b_tennisServe(z, u, p);

    % get the time derivative of the state vector
    dxdt = zeros(6, 1);
    dxdt(1:3) = z(4:6);
%     dxdt(4:6) = I\(T + Je'*F - C*om - G - K*th - B*om);
    dxdt(4:6) = A\b;
end